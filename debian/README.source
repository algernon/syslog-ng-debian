syslog-ng Debian sources
========================

This is the Debian packaging of syslog-ng. It is a non-trivial
packaging, not for the faint of heart, but rest assured, every quirk,
every strange solution is there for a reason, and this document is
here to explain the details.

There were a number of goals that influenced how the packaging was set
up, namely:

 * The packaging should be independent and separate from the upstream
   sources. We want the `debian/` directory to be copy-able into an
   upstream git checkout, or to an upstream dist tarball, and still
   work.

   We want merges between packaging branches to be painless, to not
   have to worry about accidentally merging upstream changes too.

 * The packaging should be generic enough to work on most Debian and
   derived distributions, provided they have recent enough
   build-dependencies.

 * Running a `debian/rules build` from a freshly checked out git
   repository should produce binary packages, provided
   build-dependencies are met.

 * We want a branch for each Debian (or Ubuntu) release, where the
   package is actively maintained. This includes Debian *unstable* and
   *experimental* too.

For these reasons, this repository contains the `debian/` directory
only, and the appropriate syslog-ng release as a submodule (for the
sake of convenience, and to be able to tag a debian version). The
branches are all prefixed with the vendor (`debian/` or `ubuntu/`),
followed by the release (`unstable`, `experimental`, `jessie`, and so
on). Any other branch that may be present is likely a temporary
branch.

Packaging quirks
----------------

Most of the quirks we do happen in `debian/rules`, and they're also
documented there. If there is conflict between this document and
`debian/rules`, the latter is to be trusted.

### Source layout magic

There are two ways the packaging can be laid out on top of upstream
sources: either directly on top of it (in which case the upstream
sources are in the same directory as `debian/`), or with the upstream
sources in a `syslog-ng-3.6/` subdirectory.

To support both, `debian/rules` sets the **SRCDIR** make variable to
the appropriate value, depending on whether the syslog-ng subdirectory
exists. This is then used in every place where we work with the source
directory. Most often, this happens through debhelper, therefore we
add a `-D${SRCDIR}` option to **DH_OPTIONS**.

We are also building in a separate build directory, and that is set in
the same variable too.

### Maintainer scripts

Both syslog-ng-core, and a few of the older modules have maintainer
scripts, for various purposes.

In the case of **syslog-ng-core**, the `postrm` takes care of
disabling (on remove) or removing (on purge) the logrotate
configuration files, and also removes the control socket and the
persist file, along with the `/var/lib/syslog-ng` directory, if it is
empty.

The `preinst` for **syslog-ng-core** restores any disabled logrotate
configs, and if upgrading from a version that had symlinked conffiles,
removes those too, before unpacking the upgrade.

And the last maintainer script of **syslog-ng-core**, the `prerm`
stops the `syslog.socket` if using systemd, so that we do not get
re-enabled by socket activation during remove.

Some module packages, namely **syslog-ng-mod-json**,
**syslog-ng-mod-sql**, and **syslog-ng-mod-mongodb** also have a
`postinst`, which removes the old activation conffile that shipped
with syslog-ng versions prior to 3.4

### Platform-specific tweaks

By default, console output shall be directed to the tenth TTY device.
On GNU/Linux, this is `/dev/tty10`, while on GNU/kFreeBSD, it is
`/dev/ttya`. We get around this by using a platform-specific
configuration snippet, that declares a syslog-ng variable with the
appropriate value.

On kFreeBSD, we install one version, on Linux, another. This is done
from debian/rules.

This way, the main configuration file remains the same on all
architectures, only this little snippet changes, which makes it easier
to maintain the whole.

### Shared library ABI versions

<!-- TODO -->

### Control variables

We have two custom control variables, which are referenced by
`debian/control`: **${sng:CoreModules}** and **${sng:Modules}**. We
have these because the `syslog-ng` meta package will depend on the
former, and recommend the rest, while `syslog-ng-core` will suggest
both.

The `syslog-ng` meta package has to depend on core modules, because at
some point in the future, they were part of the monolithic `syslog-ng`
package, and for smooth upgrades, we need to keep all formerly
installed modules installed. Being a meta package, it also recommends
the other modules.

The list of Core modules is a hard-coded list (**sql**, **mongodb**,
**json**), but the optional modules are generated at build time, by
looking at `debian/control` and finding all packages with names
starting with `syslog-ng-mod-`.

We use the `debian/tools/list-modules.sh` script to construct these
lists for us, and in `debian/rules`, we override `dh_gencontrol` to
pass these along.

Development workflow
--------------------

<!-- TODO -->

Building the package
--------------------

<!-- TODO -->

 -- Gergely Nagy <algernon@madhouse-project.org>  Thu, 06 Nov 2014 09:13:03 +0100

<!--
Local Variables:
mode: markdown
End:
-->
